<aside>
	<button id="rename-file">zmień nazwę</button>
	<button id="save-file"><u>zapisz</u></button>
	<button id="show-filters">filtry</button>
	<br>
	<div id="filters" style="max-height: 0;">
		<h4>Filtry</h4>

		{{#each effects}}
		<figure class="filter">
			<input type="image" src="{{../path}}" width="100" alt="" style="filter: {{name}}(100%);">
			<figcaption>{{name}}</figcaption>
		</figure>
		{{/each}}
	</div>
	</div>
</aside>

<div id="content" class="file-editor">
	<div class="file-info">{{path}}</div>
	<div class="image" style="display: none;">
		<img src="{{path}}" alt="">
	</div>
	<canvas class="image"></canvas>
</div>

<dialog id="rename-modal" class="modal">
	<form action="/rename" method="get">
		<label for="name">Nowa nazwa</label>
		<input type="text" name="newName" placeholder="nazwa pliku" required />
		<input type="hidden" id="to-rename" name="name">
		<input type="hidden" name="textEditor" value="true">

		<div>
			<input type="submit" value="OK" id="rename-submit" style="display: none;" />
			<input type="button" value="OK" onclick="document.getElementById('rename-submit').click();" />
			<input type="button" value="Cancel" id="rename-cancel">
		</div>
	</form>
</dialog>

<script>
	const canvas = document.querySelector("canvas");
	const ctx = canvas.getContext("2d");
	const image = new Image();
	image.src = "{{path}}";

	image.onload = () => {
		reloadCanvas();
	}
	function reloadCanvas() {
		canvas.width = image.width;
		canvas.height = image.height;
		canvas.style.width = image.width + "px";
		canvas.style.height = image.height + "px";

		ctx.filter = document.querySelector("img").style.filter;
		ctx.drawImage(image, 0, 0, canvas.width, canvas.height);
	}

	const filters = document.getElementById("filters");
	document.getElementById("save-file").onclick = () => {
		const path = "{{path}}";
		const ext = path.split(".").pop();
		const dataUrl = canvas.toDataURL("image/" + ext);

		const byteCharacters = atob(dataUrl.split(",")[1]);
		const byteNumbers = new Array(byteCharacters.length);
		for (let i = 0; i < byteCharacters.length; i++) {
		    byteNumbers[i] = byteCharacters.charCodeAt(i);
		}
		const byteArray = new Uint8Array(byteNumbers);
		const blob = new Blob([byteArray], {type: "application/octet-stream"});

		fetch(`/imageeditor/saveFile?name={{path}}`, {
			method: "POST",
			body: blob,
			headers: {
				"Content-Type": "application/octet-stream",
				"Content-Disposition": "attachment; filename={{path}}"
			}
		});
	}
	document.getElementById("rename-file").onclick = () => {
		document.getElementById("to-rename").value = "{{path}}";
		document.getElementById("rename-modal").showModal();
	}
	document.getElementById("rename-cancel").onclick = () => {
		document.getElementById("rename-modal").close();
	}
	document.getElementById("show-filters").onclick = () => {
		filters.classList.toggle("show");
		if (!filters.classList.contains("show")) {
			setTimeout(() => {
				filters.style.maxHeight = 0;
			}, 500);
		} else {
			filters.style.maxHeight = "100vh";
		}
	}

	for (const input of document.querySelectorAll("input[type='image']")) {
		input.onclick = () => {
			document.querySelector("img").style.filter = input.style.filter;
			reloadCanvas();
		}
	}



</script>
